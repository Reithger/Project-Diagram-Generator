apply plugin: 'java'
apply plugin: 'application'

// Assume Java 11
sourceCompatibility = 11
targetCompatibility = 11

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url = uri("https://maven.pkg.github.com/syoon2/SoftwareVisualInterface")
  }
}

dependencies {
  // JUnit 5 / Jupiter
  testImplementation('org.junit.jupiter:junit-jupiter:5.10.0')
  testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.10.0')

  // Apache Commons
  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.13.0'
  implementation group: 'commons-cli', name: 'commons-cli', version: '1.5.0'
  implementation group: 'commons-io', name: 'commons-io', version: '2.13.0'

  // Apache Log4j2
  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.20.0'
  runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.20.0'

  // SoftwareVisualInterface
  implementation group: 'com.github.softwarevisualinterface', name: 'svi', version: '2.0-SNAPSHOT'

  // graphviz-java
  implementation group: 'guru.nidi', name: 'graphviz-java', version: '0.18.1'
  runtimeOnly group: 'org.graalvm.js', name: 'js', version: '23.0.1'
  runtimeOnly group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.20.0'
}

ext {
  javaMainClass = 'main.Main'
}

test {
  dependsOn cleanTest
  testLogging.showStandardStreams = true
}

tasks.named('test', Test) {
  useJUnitPlatform()
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
  options.compilerArgs += [
    '-Xlint:unchecked',
    '-Xlint:deprecation'
  ]
}

// Options when compiling tests
compileTestJava {
  options.encoding = 'UTF-8'
  options.compilerArgs += [
    '-Xlint:unchecked',
    '-Xlint:deprecation'
  ]
}

task buildDependenciesFolder(type: Copy) {
  from configurations.implementation
  into './dependencies'
}

application {
  mainClassName = javaMainClass
}

jar {
  manifest {
    attributes(
      "Main-Class": javaMainClass
    )
  }
}

task uberJar(type: Jar) {
  manifest {
    attributes(
      "Main-Class": javaMainClass,
      'Multi-Release': 'true'
    )
  }

  archiveClassifier = 'uber'

  from sourceSets.main.output

  duplicatesStrategy(DuplicatesStrategy.EXCLUDE)

  dependsOn configurations.runtimeClasspath
  from {
    configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
  }
}
