digraph G {
node[shape=record];

	n1 [label = "{PopoutConfig||	public PopoutConfig() {&#92;n	private void drawPage() {&#92;n	public void clickAction(int code, int x, int y) {&#92;n	public void keyAction(char code) {&#92;n	public void failure() {&#92;n	public void success() {&#92;n	public void scrollAction(int scroll) {&#92;n	public void clickPressAction(int code, int x, int y) {&#92;n	public void clickReleaseAction(int code, int x, int y) {&#92;n	public void dragAction(int code, int x, int y) {}"];
	n2 [label = "{Agent||	public Agent(Event ... eventsProvided) {&#92;n	public Agent(Collection<Event> eventsProvided) {&#92;n	public void addObservableEvents(String ... names) {&#92;n	public void addNonObservableEvents(String ... names) {&#92;n	public void addControllableEvents(String ... names) {&#92;n	public void addNonControllableEvents(String ... names) {&#92;n	public boolean getObservable(String eventName) {&#92;n	public void setObservable(String eventName, boolean in) {&#92;n	public void setControllable(String eventName, boolean in) {&#92;n	public ArrayList<String> getUnobservableEvents(){&#92;n	public boolean getControllable(String eventName) {&#92;n	public Collection<Event> getAgentEvents(){&#92;n	public void addNonPresentEvent(String eventName) {&#92;n	public boolean contains(String eventName) {}"];
	n3 [label = "{FormatConversion|- CONFIG_PATH: String&#92;n- WORKING_PATH: String&#92;n- initialized: boolean|	public static void assignPaths(String workingPath, String configPath) {&#92;n	public static String createImgFromFSM(TransitionSystem fsm, String name){&#92;n	public static String createSVGFromFSM(TransitionSystem fsm, String name){&#92;n	public static String createTikZFromSVG(TransitionSystem fsm, String name) {&#92;n	public static String createTikZFromFSM(TransitionSystem fsm, String name) {&#92;n	public static File generateDotFile(TransitionSystem fsm, String name, String type) {&#92;n	private static boolean initializeCheck() {}"];
	n4 [label = "{FSMUI|- frame: WindowFrame&#92;n- imagePage: ImagePage&#92;n- optionPageManager: OptionPageManager&#92;n- imageHeader: ImageHeader&#92;n- optionHeader: OptionsHeader&#92;n- fsmPaths: ArrayList\<String\>&#92;n- fsms: ArrayList\<FSM\>&#92;n- dotAddress: String|	public FSMUI() {&#92;n	private void createPages() {&#92;n	private void fileConfiguration() {&#92;n	private boolean verifyConfigFile(File f) {&#92;n	private void createConfigurationFile(File config) {&#92;n	private void readDirectories(File config) {&#92;n	private void writeConfigEntry(String entry, String contents) {&#92;n	private boolean verifyDotAddress(String path) {&#92;n	public void allotImage(String path) {&#92;n	public void allotTransitionSystem(String in, String name) {&#92;n	public void allotTransitionSystem(FSM in, String name) {&#92;n	public void removeImage(int index) {&#92;n	public void removeTransitionSystem(int index) {&#92;n	public void removeActiveTransitionSystem() {&#92;n	public void refreshActiveImage() {&#92;n	public void saveActiveFSMSource() {&#92;n	public String saveActiveFSMImage() {&#92;n	public String saveActiveTikZ() {&#92;n	public String saveActiveSVG() {&#92;n	public void renameActiveFSM(String newName) {&#92;n	public void deleteActiveFSM() {&#92;n	private void deleteFSMFromMemory(String name) {&#92;n	public void updateDisplay() {&#92;n	public void updateOptionHeader() {&#92;n	public void updateImageHeader() {&#92;n	public void updateActiveOptionPage() {&#92;n	public void updateImagePanel() {&#92;n	public FSM getActiveFSM() {&#92;n	public ArrayList<String> getFSMList(){&#92;n	public String getFSMPath(int index) {&#92;n	public FSM getFSM(int index) {&#92;n	public int getCurrentActiveFSM() {&#92;n	public BufferedReader retrieveFileReader(String pathIn) {&#92;n	public static String stripPath(String in) {&#92;n	public void popupDisplayText(String text) {}"];
	n5 [label = "{EntrySet|- contents: String\[\]&#92;n- subsystemCode: int&#92;n- category: String&#92;n- label: String&#92;n- type: String&#92;n- code: int&#92;n- button: boolean|	public EntrySet(String lab, String ty, boolean butt, int co) {&#92;n	public int drawEntrySet(int y) {&#92;n	public boolean appendItem(String ref) {&#92;n	public boolean removeItem(int ind) {&#92;n	public void resetContents() {&#92;n	public void processEvent() {&#92;n	public void setCode(int in) {&#92;n	public void setCategory(String in) {&#92;n	public String getElementPrefix() {&#92;n	public String getElementNameTextEntry(int ind) {&#92;n	private int getEntryContentSize(String in) {&#92;n	public int getCode() {&#92;n	public String getLabel() {&#92;n	public String getType() {&#92;n	public String[] getContents() {&#92;n	public String getContentAtIndex(int index) {}"];
	n6 [label = "{ReadWrite||	public boolean writeToFile(String filePath, String special, TransitionFunction transF, String ext) {&#92;n	public ArrayList<ArrayList<String>> readFromFile(StateMap states, EventMap events, TransitionFunction transitions, File file){}"];
	n7 [label = "{ImageHeader|- imagePage: ImagePage|	public ImageHeader(int x, int y, int wid, int hei, ImagePage refer) {&#92;n	public void update() {&#92;n	public void keyBehaviour(char code) {&#92;n	public void clickBehaviour(int code, int x, int y) {}"];
	n8 [label = "{GraphViz|- configFile: Properties&#92;n- osName: String&#92;n- cfgProp: String&#92;n- tempDir: String&#92;n- DOT: String&#92;n- graph: StringBuilder&#92;n- currentDpiPos: int| 	public GraphViz(String workingPath, String configPath) {&#92;n 	public static boolean verifyDotPath(String path) {&#92;n 	public void increaseDpi() {&#92;n 	public void decreaseDpi() {&#92;n 	public int getImageDpi() {&#92;n 	public String getDotSource() {&#92;n 	public String start_subgraph(int clusterid) {&#92;n 	public String end_subgraph() {&#92;n 	public String start_graph() {&#92;n 	public String end_graph() {&#92;n 	public void clearGraph(){&#92;n 	public void add(String line) {&#92;n 	public void addln(String line) {&#92;n 	public void addln() {}"];
	n9 [label = "{Category|- name: String&#92;n- sets: ArrayList\<EntrySet\>&#92;n- contained: HashSet\<Integer\>&#92;n- open: boolean&#92;n- code: int|	public Category(String nom) {&#92;n	public int drawCategoryHeader(int y) {&#92;n	public void toggleOpen() {&#92;n	public void hideContents() {&#92;n	public void setCode(int in) {&#92;n	public void addEntrySet(EntrySet in) {&#92;n	public EntrySet getEntrySet(int code) {&#92;n	public boolean isOpen() {&#92;n	public String getContents(int code, int posit) {&#92;n	public int getCode() {&#92;n	public ArrayList<EntrySet> getEntrySets(){&#92;n	public String getTitle() {&#92;n	public boolean contains(int code) {}"];
	n10 [label = "{OptionsHeader|- optionPageManager: OptionPageManager|	public OptionsHeader(int x, int y, int wid, int hei, OptionPageManager refer) {&#92;n	public void update() {&#92;n	public void keyBehaviour(char code) {&#92;n	public void clickBehaviour(int code, int x, int y) {}"];
	n11 [label = "{PopoutImageDisplay|- imageDisplay: ImageDisplay&#92;n- dragStartX: int&#92;n- dragStartY: int&#92;n- dragState: boolean|	public PopoutImageDisplay(String ref) {&#92;n	public void resize(int wid, int hei) {&#92;n	public void clickAction(int code, int x, int y) {&#92;n	public void keyAction(char code) {&#92;n	public void scrollAction(int scroll) {&#92;n	public void clickPressAction(int code, int x, int y) {&#92;n	public void clickReleaseAction(int code, int x, int y) {&#92;n	public void dragAction(int code, int x, int y) {}"];
	n12 [label = "{Operations||	public Operations(int x, int y, int wid, int hei) {&#92;n	public void applyCode(int code) {&#92;n	private FSM[] getFSMArray(int code) throws Exception{&#92;n	private FSM getFSM(int code) throws Exception{&#92;n	private ModalSpecification getModal(int code) throws Exception{}"];
	n13 [label = "{Event|# id: String&#92;n- controllability: boolean&#92;n- systemObservability: boolean&#92;n- attackerObservability: boolean|	public Event() {&#92;n	public Event(String eventName) {&#92;n	public Event(String eventName, boolean cont, boolean obs, boolean atk) {&#92;n	public Event(Event oldEvent) {&#92;n	public Event(Event other1, Event other2) {&#92;n	public void setEventName(String in) {&#92;n	public void setEventObservability(boolean obs) {&#92;n	public void setEventAttackerObservability(boolean obs) {&#92;n	public void setEventControllability(boolean con) {&#92;n	public String getEventName() {&#92;n	public int getEventType() {&#92;n	public boolean getEventObservability() {&#92;n	public boolean getEventAttackerObservability() {&#92;n	public boolean getEventControllability() {&#92;n	public void resetEventAttributes() {&#92;n	public boolean equals(Object other) {}"];
	n14 [label = "{StateMap|- states: HashMap\<String, State\>&#92;n- composition: HashMap\<State, ArrayList\<State\>\>|	public StateMap() {&#92;n	public boolean renameState(State state, String newName) {&#92;n	public boolean renameState(String oldName, String newName) {&#92;n	public void renameStates() {&#92;n	public String makeDotString() {&#92;n	public ArrayList<State> getStateComposition(State provided){&#92;n	public HashMap<State, ArrayList<State>> getComposedStates(){&#92;n	public State getState(String stateName) {&#92;n	public State getState(State state) {&#92;n	public boolean stateExists(String stateName) {&#92;n	public Collection<State> getStates() {&#92;n	public void setStateMapStates(HashMap<String, State> inHash) {&#92;n	public void setCompositionStates(HashMap<State, ArrayList<State>> newComposed) {&#92;n	public void setStateComposition(State keyState, ArrayList<State> composedStates) {&#92;n	public State addState(State state) {&#92;n	public State addState(State state, String prefix) {&#92;n	public State addState(State state1, State state2) {&#92;n	public State addState(String stateName) {&#92;n	public State addState(State ... providedStates) {&#92;n	public void removeState(State state) {&#92;n	public void removeState(String stateName) {&#92;n	public void removeStates(ArrayList<State> inStates) {&#92;n	public void removeStates(HashSet<State> inStates) {&#92;n	public String toString() {}"];
	n15 [label = "{test||	public static void main(String[] args) {&#92;n	public static void testA() {&#92;n	public static void testB() {&#92;n		catch(Exception e) {}&#92;n	public static void testC() {}"];
	n16 [label = "{Transition|+ event: Event&#92;n- states: ArrayList\<State\>|	public Transition(Event inEvent, State ... inStates) {&#92;n	public Transition(Event inEvent, Collection<State> inStates) {&#92;n	public Transition() {&#92;n	public String makeDotString(State firstState) {&#92;n	public String makeDotStringMayTransition(State firstState) {&#92;n	public Transition generateTransition(){&#92;n	public void setTransitionState(ArrayList<State> in) {&#92;n	public void setTransitionState(State in) {&#92;n	public void setTransitionEvent(Event in) {&#92;n	public Event getTransitionEvent() {&#92;n	public ArrayList<State> getTransitionStates() {&#92;n	public boolean stateExists(String stateName) {&#92;n	public boolean stateExists(State inState) {&#92;n	public boolean addTransitionState(State stateNew) {&#92;n	public boolean removeTransitionState(String stateName) {&#92;n	public boolean removeTransitionState(State inState) {&#92;n	public boolean removeTransitionStates(Collection<State> inStates) {&#92;n	public int compareTo(Transition o) {&#92;n	public String toString() {}"];
	n17 [label = "{UStructure|- plantFSM: FSM&#92;n- agents: Agent\[\]&#92;n- badTransitions: HashMap\<String, ArrayList\<Transition\>\>&#92;n- compositeMapping: HashMap\<State, State\[\]\>&#92;n- uStructure: FSM&#92;n- goodBadStates: HashSet\<State\>&#92;n- badGoodStates: HashSet\<State\>|	public UStructure(FSM thePlant, TransitionFunction theBadTransitions, Agent ... theAgents) {&#92;n	public UStructure(FSM thePlant, TransitionFunction theBadTransitions, ArrayList<Agent> theAgents) {&#92;n	public void createUStructure() {&#92;n	public void createUStructureAgain() {&#92;n	private HashSet<String> generateObservablePermutation(HashSet<String> tags, int index,  String total, boolean[] sight){&#92;n	public void findIllegalStates() {&#92;n	public FSM getUStructure() {&#92;n	public FSM getPlantFSM() {&#92;n	public HashSet<State> getIllegalConfigOneStates(){&#92;n	public HashSet<State> getIllegalConfigTwoStates(){&#92;n	public BatchAgentStates(State[] states, State identity) {&#92;n	public State[] getStates() {&#92;n	public void setState(State in) {&#92;n	public int compareTo(BatchAgentStates o) {&#92;n	public State getIdentityState() {&#92;n	public boolean equals(Object o1) {}"];
	n18 [label = "{MultiFSMSelection|- selected: MultiFSMSelectedPanel&#92;n- choice: MultiFSMSelectablePanel&#92;n- context: EntrySet|	public MultiFSMSelection(EntrySet ref) {&#92;n	public void reactToResize() {&#92;n	public void redraw() {&#92;n	public EntrySet getContext() {}"];
	n19 [label = "{DisabledEvents|- stateIsDisabled: boolean&#92;n- disabledEvents: ArrayList\<String\>|	public DisabledEvents(boolean stateDisabled) {&#92;n	public boolean stateIsDisabled() {&#92;n	public boolean allEventsEnabled() {&#92;n	public boolean eventIsEnabled(String eventName) {&#92;n	public ArrayList<String> getDisabledEvents() {&#92;n	public void disableState() {&#92;n	public void disableEvent(String eventName) {&#92;n	public void disableEvents(DisabledEvents other) {&#92;n	public String toString() {}"];
	n20 [label = "{ImageDisplay|- imageName: String&#92;n- imagePath: String&#92;n- reference: Image&#92;n- zoom: double&#92;n- p: ElementPanel&#92;n- originUIX: int&#92;n- originUIY: int&#92;n- popout: boolean&#92;n- hideUI: boolean|	public ImageDisplay(String path, ElementPanel in) {&#92;n	public void processClickInput(int code) {&#92;n	public void processKeyInput(char code) {&#92;n	public void generatePopout() {&#92;n	public void drawPage() {&#92;n	public void refresh() {&#92;n	public void clear() {&#92;n	public void resetPosition() {&#92;n	private void drawImageButton(String name, boolean frame, int x, int y, int wid, int hei, String path, int code) {&#92;n	public void designatePopout() {&#92;n	public void setImagePath(String in) {&#92;n	public void increaseOriginX() {&#92;n	public void increaseOriginY() {&#92;n	public void decreaseOriginX() {&#92;n	public void decreaseOriginY() {&#92;n	public void dragOriginX(int amount) {&#92;n	public void dragOriginY(int amount) {&#92;n	public void increaseZoom() {&#92;n	public void decreaseZoom() {&#92;n	public String getImageName() {&#92;n	public String getImagePath() {&#92;n	public Image getImage() {&#92;n	public double getZoom() {&#92;n	private String formatImageName(String in) {}"];
	n21 [label = "{State|- id: String&#92;n- initial: boolean&#92;n- marked: boolean&#92;n- badState: boolean&#92;n- privacy: boolean|	public State(String name, boolean init, boolean mark) {&#92;n	public State(String name, int code) {&#92;n	public State(State ... states) {&#92;n	public State(State replace) {&#92;n	public State(State state1, State state2) {&#92;n	public State(String name) {&#92;n	public State() {&#92;n	public State copy() {&#92;n	public void copyDataFrom(State other) {&#92;n	public State makeStateWith(State other) {&#92;n	public String makeDotString() {&#92;n	public String getStateName() {&#92;n	public boolean getStateInitial() {&#92;n	public boolean getStateMarked() {&#92;n	public boolean getStatePrivate() {&#92;n	public boolean getStateBad() {&#92;n	public void setStateName(String in) {&#92;n	public void setStateInitial(boolean init) {&#92;n	public void setStateMarked(boolean init) {&#92;n	public void setStatePrivate(boolean init) {&#92;n	public void setStateBad(boolean init) {&#92;n	public int compare(State st1, State st2) {&#92;n	public int compareTo(State o) {&#92;n	public String toString() {}"];
	n22 [label = "{HeaderBase||	public HeaderBase(int x, int y, int wid, int hei) {&#92;n	public void handleText(String nom, int x, int y, int wid, int hei, Font font, String phr) {&#92;n	public void handleTextEntry(String nom, int x, int y, int wid, int hei, int cod, String phr) {&#92;n	public void handleButton(String nom, int x, int y, int wid, int hei, int code) {&#92;n	public void handleLine(String nom, int x, int y, int x2, int y2, int thck, Color col) {&#92;n	public void handleRectangle(String nom, int prior, int x, int y, int wid, int hei, Color col, Color col2) {&#92;n	public int getMinimumScreenX() {&#92;n	public void mouseWheelBehaviour(int rotation) {}"];
	n23 [label = "{UStructurePage||	public UStructurePage(int x, int y, int wid, int hei) {&#92;n	public void applyCode(int code) {&#92;n	public void setAgents(ArrayList<Agent> in) {}"];
	n24 [label = "{PopoutAlert||	public PopoutAlert(String text) {&#92;n	public void clickAction(int code, int x, int y) {&#92;n	public void keyAction(char code) {&#92;n	public void scrollAction(int scroll) {&#92;n	public void clickPressAction(int code, int x, int y) {&#92;n	public void clickReleaseAction(int code, int x, int y) {&#92;n	public void dragAction(int code, int x, int y) {}"];
	n25 [label = "{ModalSpecification|# initialState: State&#92;n# mustTransitions: TransitionFunction&#92;n- Transition\>: \<T extends|	public ModalSpecification(File in, String inId) {&#92;n	public <T1 extends Transition> ModalSpecification(TransitionSystem other, String inId) {&#92;n	public ModalSpecification(ModalSpecification other, HashSet<String> badStates, String inId) {&#92;n	public ModalSpecification(String inId) {&#92;n	public ModalSpecification() {&#92;n	public FSM getUnderlyingFSM() {&#92;n	public FSM buildOptimalOpaqueController() {&#92;n	public HashSet<State> epsilonReach(ModalSpecification ts, State s, boolean must){&#92;n	public void toTextFile(String filePath, String name) {&#92;n	public String makeDotString() {&#92;n	public ModalSpecification makeAccessible() {&#92;n	public FSM getSupremalControllableSublanguage(FSM other) {&#92;n	public ArrayList<State> testCurrentStateOpacity() {&#92;n	public ModalSpecification product(ModalSpecification ... other) {&#92;n	protected void productHelper(ModalSpecification other, ModalSpecification newFSM) {&#92;n	public ModalSpecification parallelComposition(ModalSpecification ... other) {&#92;n	protected void parallelCompositionHelper(ModalSpecification other, ModalSpecification newFSM) {&#92;n	public ModalSpecification newPrune(ModalSpecification modal1, ModalSpecification modal2, ModalSpecification composedModal) {&#92;n	public boolean stateIsBad(ModalSpecification modal1, ModalSpecification modal2, ModalSpecification composedModal, State s) {&#92;n	public boolean privateEventSearch(EventMap mod, State modState, EventMap shared, Event e) {&#92;n	public ModalSpecification prune() {&#92;n	private boolean getBadMustTransitionStates(HashSet<String> badStates) {&#92;n	public ModalSpecification makeOptimalSupervisor(FSM ModalSpecification) throws IllegalArgumentException {&#92;n	boolean markBadStates(FSM fsm, FSM specFSM, FSM product, HashSet<String> badStates) {&#92;n	public static <T extends Transition> HashMap<String, String> createUniversalObserverView(FSM fsm, FSM newFSM) {&#92;n	private static <T extends Transition> State addComposedState(FSM fsm, HashSet<State> stateCollection) {&#92;n	public ModalSpecification getGreatestLowerBound(ModalSpecification other) {&#92;n	private ModalSpecification getPseudoLowerBound(ModalSpecification other) {&#92;n	private LinkedList<NextStates> copyCommonTransitions(NextStates curr, ModalSpecification msA, ModalSpecification msB) {&#92;n	private LinkedList<NextStates> copyPrivateTransitions(NextStates curr, ModalSpecification msA, ModalSpecification msB) {&#92;n	private LinkedList<NextStates> copyMustTransitions(NextStates curr, ModalSpecification msA, ModalSpecification msB) {&#92;n	public void copyMustTransitions(ModalSpecification other) {&#92;n	public void copyMustTransitions(ModalSpecification other, HashSet<String> badStates) {&#92;n	public TransitionFunction getMustTransitions() {&#92;n	public ArrayList<State> getInitialStates() {&#92;n	public State getInitialState() {&#92;n	public boolean hasInitialState(String stateName) {&#92;n	public DisabledEvents getDisabledEvents(State curr, FSM otherFSM, HashSet visitedStates, HashMap disabledMap) {&#92;n	public Boolean getEventControllability(String eventName) {&#92;n	public Boolean getEventObservability(String eventName) {&#92;n	public Boolean getEventAttackerObservability(String eventName) {&#92;n	public void setEventControllability(String eventName, boolean value) {&#92;n	public boolean setEventObservability(String eventName, boolean status) {&#92;n	public boolean setEventAttackerObservability(String eventName, boolean status) {&#92;n	public void addMustTransition(String state1, String eventName, String state2) {&#92;n	public void addMustTransition(State state, Transition transition) {&#92;n	public void addInitialState(String newInitial) {&#92;n	public void addInitialState(State newState) {&#92;n	public boolean removeInitialState(String stateName) {&#92;n	public boolean removeTransition(String state1, String eventName, String state2) {&#92;n	public ModalSpecification copy() {&#92;n	public boolean contains(State s, Transition t) {&#92;n	public TransitionSystem trim() {&#92;n	public TransitionSystem makeCoAccessible() {}"];
	n26 [label = "{PopoutWindow|- frame: WindowFrame&#92;n- panel: ElementPanel|	public PopoutWindow() {&#92;n	public void resize(int wid, int hei) {&#92;n	public void dispose() {&#92;n	protected void allowScrollbars(boolean set) {&#92;n	protected void removeElementPrefixed(String in) {&#92;n	public void setTitle(String in) {&#92;n	public String getStoredText(String ref) {&#92;n	protected ElementPanel getElementPanel() {&#92;n	public void handleTextButton(String nom, int x, int y, int wid, int hei, Font font, String phr, int code, Color col, Color col2) {&#92;n	public void handleText(String nom, int x, int y, int wid, int hei, Font font, String phr) {&#92;n	public void handleTextEntry(String nom, int x, int y, int wid, int hei, int cod, String phr) {&#92;n	public void handleButton(String nom, int x, int y, int wid, int hei, int code) {&#92;n	public void handleLine(String nom, int x, int y, int x2, int y2, int thck, Color col) {&#92;n	public void handleRectangle(String nom, int prior, int x, int y, int wid, int hei, Color col, Color col2) {}"];
	n27 [label = "{TransitionSystem|# states: StateMap&#92;n# events: EventMap&#92;n# transitions: TransitionFunction&#92;n# id: String|	public void renameStates() {&#92;n	public String makeDotString() {&#92;n	protected HashMap<String, Boolean> getCoAccessibleMap() {&#92;n	private boolean recursivelyFindMarked(State curr, HashMap<String, Boolean> results, HashSet<String> visited) {&#92;n	public boolean isBlocking() {&#92;n	public void copyStates(TransitionSystem other, String prefix) {&#92;n	public void copyStates(TransitionSystem other) {&#92;n	public void copyStates(TransitionSystem other, HashSet<String> badStates) {&#92;n	public void copyEvents(TransitionSystem other) {&#92;n	public void copyTransitions(TransitionSystem other) {&#92;n	public void setId(String inId) {&#92;n	public void setStateComposition(State aggregate, State ... pieces) {&#92;n	public void setStateCompositionDuplicate(State aggregate, State ... pieces) {&#92;n	public void setCompositionStates(HashMap<State, ArrayList<State>> composed) {&#92;n	public void setFSMStateMap(StateMap inState) {&#92;n	public void setFSMEventMap(EventMap inEvent) {&#92;n	public void setFSMTransitionFunction(TransitionFunction inTrans) {&#92;n	public void constructFSM(StateMap inStates, TransitionFunction inTrans, EventMap inEvents) {&#92;n	public StateMap getStateMap() {&#92;n	public EventMap getEventMap() {&#92;n	public String getId() {&#92;n	public HashMap<State, ArrayList<State>> getComposedStates(){&#92;n	public ArrayList<State> getStateComposition(State state){&#92;n	public ArrayList<Transition> getStateTransitions(State state){&#92;n	public State getState(State state) {&#92;n	public Collection<State> getStates() {&#92;n	public Collection<Event> getEvents(){&#92;n	public State getState(String stateName) {&#92;n	public Event getEvent(String eventName) {&#92;n	public boolean stateExists(String stateName) {&#92;n	public TransitionFunction getTransitions() {&#92;n	public boolean isMarked(String stateName) {&#92;n	public State addState(String stateName) {&#92;n	public State addState(State state) {&#92;n	public State addState(State ... state) {&#92;n	public void addStateTransitions(State state, ArrayList<Transition> newTransitions) {&#92;n	public void addStateComposition(HashMap<State, ArrayList<State>> composed) {&#92;n	public void addTransition(String state1, String eventName, String state2) {&#92;n	public void addTransition(State state, Transition transition) {&#92;n	public void addTransition(State state, Event event, State state2) {&#92;n	public boolean removeState(String stateName) {&#92;n	public boolean removeTransition(String state1, String eventName, String state2) {&#92;n	public void markAllStates() {&#92;n	public void unmarkAllStates() {&#92;n	public void makeAllStatesGood() {&#92;n	public void removeBadStates() {&#92;n	public Boolean toggleMarkedState(String stateName) {&#92;n	public Boolean toggleBadState(String stateName) {&#92;n	public Boolean toggleSecretState(String stateName) {}"];
	n28 [label = "{SVGtoTikZ||	public static File convertSVGToTikZ(File f, String path) {&#92;n	private static String drawCircleNode(double x, double y, double rad, boolean mark, String name, String color) {&#92;n	private static String drawEdges(ArrayList<Double> path, String color, boolean dotted) {&#92;n	private static String drawPolygon(ArrayList<Double> path, String color) {&#92;n	private static String drawLabel(double x, double y, String name) {}"];
	n29 [label = "{OptionPageManager|- currentOptionPageIndex: int&#92;n- p: ElementPanel|	public OptionPageManager(FSMUI reference) {&#92;n	public ElementPanel generateElementPanel(int x, int y, int width, int height) {&#92;n	public void drawPage() {&#92;n	public void setCurrentOptionPageIndex(int in) {&#92;n	public int getCurrentOptionPageIndex() {&#92;n	public OptionPage[] getOptionPageList() {}"];
	n30 [label = "{TransitionFunction|# transitions: HashMap\<State, ArrayList\<Transition\>\>|	public TransitionFunction() {&#92;n	public String makeDotString() {&#92;n	public String makeDotStringExcluding(TransitionFunction other) {&#92;n	public HashMap<State, HashSet<State>> getEpsilonReaches(Collection<State> fsmStates) {&#92;n	public HashSet<String> getInconsistentStates(TransitionFunction mustTransitionFunction) {&#92;n	public ArrayList<Transition> getTransitions(State state) {&#92;n	public ArrayList<Transition> getSortedTransitions(State state) {&#92;n	public Set<Map.Entry<State, ArrayList<Transition>>> getAllTransitions() {&#92;n	public Collection<State> getStates(){&#92;n	public Transition getEmptyTransition() {&#92;n	public boolean eventExists(State state, Event event) {&#92;n	public ArrayList<State> getTransitionStates(State state, Event event) {&#92;n	public boolean contains(State reference, Transition transition) {&#92;n	public void putTransitions(State state, ArrayList<Transition> inTransitions) {&#92;n	public void addTransition(State state, Transition transition) {&#92;n	public void addTransitionState(State inState, Event event, State outState) {&#92;n	public void addTransition(String state, String event, String outState) {&#92;n	public void removeState(State state) {&#92;n	public void removeStates(Collection<State> badStates) {&#92;n	public boolean removeTransition(State stateFrom, Event event, State stateTo) {}"];
	n31 [label = "{SingleFSMSelection|- pan: SingleFSMPanel|	public SingleFSMSelection(EntrySet ref) {&#92;n	public void reactToResize() {}"];
	n32 [label = "{OptionPage|- header: String&#92;n- help: String&#92;n- categories: ArrayList\<Category\>&#92;n+ SUBSYSTEM_CODE: int&#92;n- p: ElementPanel&#92;n- reference: FSMUI&#92;n- showHelp: boolean&#92;n- helpKey: int&#92;n- showSettings: boolean&#92;n- settingsKey: int|	public OptionPage(String head, String inHelp, String[] categoriesIn, Object[][][] data) {&#92;n	public void drawPage() {&#92;n	public void drawNormalPage() {&#92;n	public void drawHelpPage() {&#92;n	public void handleMouseInput(int code, int x, int y) {&#92;n	public static void assignElementPanel(ElementPanel inP) {&#92;n	public static void assignFSMUI(FSMUI fsm) {&#92;n	public void addCategory(String title) {&#92;n	public void addEntrySet(String category, String label, String type, int code, boolean activeButton) {&#92;n	public void resetCodeEntries(int code) {&#92;n	public boolean toggleCategory(int code) { &#92;n	public void appendContentToCode(int code, String reference) {&#92;n	public void removeContentsFromCode(int code, int index) {&#92;n	public String getHeader() {&#92;n	public static FSMUI getFSMUI() {&#92;n	public static ElementPanel getElementPanel() {&#92;n	public Category getCategory(String title) {&#92;n	public Category getCategoryFromCode(int code) {&#92;n	public EntrySet getEntrySetFromCode(int code) {&#92;n	public String getTextFromCode(int code, int posit){&#92;n	public Integer getIntegerFromCode(int code, int posit) {&#92;n	public Boolean getCheckboxContentsFromCode(int code) {&#92;n	public String getTypeFromCode(int code) {&#92;n	public String[] getContentFromCode(int code) {&#92;n	public static void handleText(String nom, int x, int y, int wid, int hei, Font inF, String phr) {&#92;n	public static void handleImage(String nom, int x, int y, String path, double scale) {&#92;n	public static void handleTextEntry(String nom, int x, int y, int wid, int hei, int cod, String phr) {&#92;n	public static void handleButton(String nom, int x, int y, int wid, int hei, int code) {&#92;n	public static void handleLine(String nom, int x, int y, int x2, int y2, int thck, Color col) {&#92;n	public static void handleRectangle(String nom, int x, int y, int wid, int hei, Color inside, Color border) {}"];
	n33 [label = "{PopoutSelectList|- ref: String\[\]&#92;n- used: String\[\]&#92;n- searchTerm: String&#92;n- filtered: boolean|	public PopoutSelectList(String[] list, boolean filter) {&#92;n	private void drawPage() {&#92;n	private void filterList() {&#92;n	public void clickAction(int code, int x, int y) {&#92;n	public void keyAction(char code) {&#92;n	public void scrollAction(int scroll) {&#92;n	public void clickPressAction(int code, int x, int y) {&#92;n	public void clickReleaseAction(int code, int x, int y) {&#92;n	public void dragAction(int code, int x, int y) {}"];
	n34 [label = "{GenerateFSM|- events: ArrayList\<String\>&#92;n- states: ArrayList\<String\>|	public static String createNewFSM(int sizeStates, int sizeMarked, int sizeEvents, int sizePaths, int sizeInitial, int sizePrivate, int sizeUnobserv, int sizeAttacker, int sizeControl, boolean nonDet, String name, String filePath) {&#92;n	public static String createModalSpec(int sizeStates, int sizeMarked, int sizeEvents, int sizePaths, int sizePrivate, int sizeUnobserv, int sizeAttacker, int sizeControl, int sizeMust, String name, String filePath) {}"];
	n35 [label = "{PopoutAgentSelection|- DEFAULT_FONT: Font&#92;n- SMALL_FONT: Font&#92;n- SMALLER_FONT: Font|	public PopoutAgentSelection(UStructurePage context, String ref) {&#92;n	public void drawPage() {&#92;n	public void clickAction(int code, int x, int y) {&#92;n	public void clickPressAction(int code, int x, int y) {&#92;n	public void clickReleaseAction(int code, int x, int y) {&#92;n	public void keyAction(char code) {&#92;n	public void scrollAction(int scroll) {&#92;n	public void dragAction(int code, int x, int y) {}"];
	n36 [label = "{FSM|# initialStates: ArrayList\<State\>|	public FSM(File in, String inId) throws Exception{&#92;n	public FSM(TransitionSystem other, String inId) {&#92;n	public FSM(String inId) {&#92;n	public FSM() {&#92;n	public FSM buildObserver() {&#92;n	public void toTextFile(String filePath, String name) {&#92;n	public  DisabledEvents getDisabledEvents(State curr, FSM otherFSM, HashSet<String> visitedStates, HashMap<String, DisabledEvents> disabledMap) {&#92;n	public ArrayList<State> testCurrentStateOpacity(){&#92;n	public FSM trim() {&#92;n	public FSM makeAccessible() {&#92;n	public FSM makeCoAccessible() {&#92;n	public FSM product(FSM ... other) {&#92;n	public FSM parallelComposition(FSM ... other){&#92;n	public FSM getSupremalControllableSublanguage(FSM other) {&#92;n	protected void productHelper(FSM other, FSM newFSM) {&#92;n	protected  void parallelCompositionHelper(FSM other, FSM newFSM) {&#92;n	public ArrayList<State> getInitialStates() {&#92;n	public boolean hasInitialState(String stateName) {&#92;n	public Boolean getEventObservability(String eventName) {&#92;n	public Boolean getEventControllability(String eventName) {&#92;n	public Boolean getEventAttackerObservability(String eventName) {&#92;n	public boolean setEventObservability(String eventName, boolean status) {&#92;n	public void setEventControllability(String eventName, boolean value) {&#92;n	public boolean setEventAttackerObservability(String eventName, boolean status) {&#92;n	public void addInitialState(String newInitial) {&#92;n	public void addInitialState(State newState) {&#92;n	public boolean removeInitialState(String stateName) {&#92;n	public FSM copy() {}"];
	n37 [label = "{ImagePage|- p: ElementPanel&#92;n- images: ArrayList\<ImageDisplay\>&#92;n- currentImageIndex: int&#92;n- reference: FSMUI&#92;n- dragStartX: int&#92;n- dragStartY: int&#92;n- dragState: boolean|	public ImagePage(FSMUI ref) {&#92;n	public ElementPanel generateElementPanel(int x, int y, int width, int height) {&#92;n	public void generatePopout() {&#92;n	public void replaceActiveImage(String newName) {&#92;n	public void refreshActiveImage() {&#92;n	public void allotImage(String path) {&#92;n	public void removeImage(int ind){&#92;n	public void drawPage() {&#92;n	private void addFraming() {&#92;n	public void setCurrentImageIndex(int in) {&#92;n	public void increaseCurrentImageIndex() {&#92;n	public void decreaseCurrentImageIndex() {&#92;n	public ArrayList<String> getImages(){&#92;n	public int getCurrentImageIndex() {&#92;n	public ImageDisplay getCurrentImageDisplay() {}"];
	n38 [label = "{EventMap|- events: HashMap\<String, Event\>|	public EventMap() {&#92;n	public void renameEvent(String oldName, String newName) {&#92;n	public EventMap getSharedEvents(EventMap other) {&#92;n	public Event getEvent(String eventName) {&#92;n	public Event getEvent(Event event) {&#92;n	public Collection<Event> getEvents() {&#92;n	public HashSet<String> getPrivateEvents(EventMap other) {&#92;n	public boolean eventExists(String eventName) {&#92;n	public Event addEvent(Event oldEvent) {&#92;n	public Event addEvent(Event event1, Event event2) {&#92;n	public Event addEvent(String eventName) {&#92;n	public void removeEvent(Event event) {&#92;n	public void removeEvent(String eventName) {&#92;n	public void resetEvents() {&#92;n	public boolean contains(Event in) {&#92;n	public boolean contains(String in) {}"];
	n39 [label = "{AdjustFSM||	public AdjustFSM(int x, int y, int width, int height) {&#92;n	public void applyCode(int code) {}"];

		n2 -> n13;
n2 -> n38;
	n3 -> n27;
n3 -> n8;
n3 -> n4;
n3 -> n24;
	n4 -> n36;
n4 -> n8;
n4 -> n3;
n4 -> n7;
n4 -> n10;
n4 -> n37;
n4 -> n29;
n4 -> n24;
n4 -> n1;
	n5 -> n4;
n5 -> n32;
	n6 -> n13;
n6 -> n21;
n6 -> n16;
n6 -> n38;
n6 -> n14;
n6 -> n30;
	n7 -> n4;
n7 -> n37;
		n9 -> n5;
	n10 -> n4;
n10 -> n29;
	n11 -> n20;
	n12 -> n36;
n12 -> n25;
n12 -> n2;
n12 -> n17;
n12 -> n30;
n12 -> n4;
n12 -> n32;
n12 -> n5;
		n14 -> n21;
	n15 -> n36;
n15 -> n2;
n15 -> n17;
n15 -> n13;
n15 -> n21;
n15 -> n30;
n15 -> n3;
n15 -> n4;
n15 -> n35;
		n17 -> n36;
n17 -> n13;
n17 -> n21;
n17 -> n16;
n17 -> n30;
	n18 -> n4;
n18 -> n32;
		n20 -> n11;
			n23 -> n36;
n23 -> n2;
n23 -> n17;
n23 -> n30;
n23 -> n4;
n23 -> n32;
n23 -> n5;
n23 -> n35;
		n25 -> n13;
n25 -> n21;
n25 -> n16;
n25 -> n38;
n25 -> n14;
n25 -> n30;
n25 -> n3;
n25 -> n6;
n25 -> n19;
		n27 -> n13;
n27 -> n21;
n27 -> n16;
n27 -> n38;
n27 -> n14;
n27 -> n30;
		n29 -> n4;
n29 -> n39;
n29 -> n12;
n29 -> n23;
	n30 -> n13;
n30 -> n21;
n30 -> n16;
	n31 -> n4;
n31 -> n32;
	n32 -> n4;
n32 -> n5;
	n33 -> n4;
		n35 -> n36;
n35 -> n2;
n35 -> n13;
n35 -> n38;
n35 -> n23;
	n36 -> n19;
n36 -> n13;
n36 -> n21;
n36 -> n16;
n36 -> n38;
n36 -> n14;
n36 -> n30;
n36 -> n6;
	n37 -> n4;
	n38 -> n13;
	n39 -> n3;
n39 -> n34;
n39 -> n4;
n39 -> n32;
n39 -> n5;
n39 -> n33;
n39 -> n24;
}